$DATE「2022年10月3日（Discord にて）」
tkr「そういや C コンパイラやってないな。アセンブリ言語を機械語にするのに binutils のを使うのもどうなんだろと思ってたらそのまま数ヶ月経ってた」
hsjoihs「いいですね。だったら、Rui 本の原則に則って、『step 1 からもう ELF バイナリへとコンパイルしちゃう』『常に実行形式をコンパイラが生成し続けられるようにする』というのでやってみませんか？」
tkr「なるほど」
hsjoihs「C → アセンブラのコンパイラをセルフホストしたあとにアセンブラとリンカと libc と書くのは既に ushitora_anqou がやってるけど、最初から ELF バイナリへとコンパイルしつづける形式で Rui 本を走ってる人を私は知らないので、やってみるとおもしろそう」
hsjoihs「教材書けとは言わんので、作業ログでもいいんで書いてみません？言語はどれでやるんです？」
tkr「もちろん Rust」
hsjoihs「じゃあ、step 1 は『return 3; するやつと return 42; するやつを gcc でコンパイルして ELF バイナリを吐いて、その差分を比較してどのバイトを置き換えるべきかを調べ、それを `include_bytes!()` する』という方針にするのがよさそう」
hsjoihs「なので、step 1 ではアセンブラもリンカもない。まあ、拡張していくと、機械語を直にいじるのがじきにきつくなるので、だんだんアセンブリ言語が育っていって、それは GNU のアセンブリ言語とそれなりに互換性があることが期待されるが、別にそれを目標にするわけではない。」
hsjoihs「という感じでやっていくとよさそう。今日はもう寝ます？」
tkr「いま布団の中です」
hsjoihs「ではでは、おやすみなさい〜」
$DATE「2022年10月3日（一人で作業）」
hsjoihs「じゃあ私が勝手に step 1 を実装するか。なんなら会話ログももうレンダリングできるようにしておこう」
hsjoihs「とりあえず docs フォルダを立てて、docs/dialog.txt に会話を書いて docs/ 内で node index.js したらログがレンダリングできるようにしておいた」
hsjoihs「このリポジトリに招待を飛ばしておいて、」
hsjoihs「Ubuntu の方にリポジトリをクローンし、cargo init し、議事録を書く。おや、npm が通らない。えっと https://stackoverflow.com/questions/67938486/after-installing-npm-on-wsl-ubuntu-20-04-i-get-the-message-usr-bin-env-bash に従ったら直った。」
hsjoihs「ちゃんと README.md も書いておこう。まあ日本語と英語で書いておくか。」
hsjoihs「もう step 1 は私がやってしまおう。experiment フォルダにファイルを用意して、」
hsjoihs「とりあえず Makefile はこんな感じでいいか」
$source
```Makefile
CFLAGS=-std=c17 -Wall -s

3: 3.c
42: 42.c

clean: 
	rm 3
	rm 42

.PHONY: clean
```
hsjoihs「gcc が出力したファイルのサイズを数えると、」

$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ wc -c 3
13296 3
```

hsjoihs「うーむ、デカい！」
hsjoihs「まあ、考えてみると、一応 gcc の出力をそのまま使う必要もないんだよな」
hsjoihs「 https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html に頼って、もっと小さい実行形式を出力できるようなお膳立てをしてからじゃないと step 1 にふさわしくない気がする」
hsjoihs「というか、reproducible なビルドになるようにしないといけないんだよな」
hsjoihs「……よし、こうするか。」
$HTML「<ol><li>nasm かなんかで小さな .asm をコンパイルすることで、我々が目指すべき「動く小さい ELF バイナリ」を得る</li><li>それはそれとして、我々が作るのは C コンパイラなので、常に C 言語（のようなもの）を入力として取る</li></ol>」
$DATE「2022年10月3日（yukata_yu との会話）」
ゆかたゆ「-O1 を使わないのですか？ (エイリアスなんでしたっけ)」
ゆかたゆ「あー， -Osがあるんだ…」
hsjoihs「-O1 を導入せず、gcc を消し飛ばして nasm で作るようにします」
ゆかたゆ「なるほ」
hsjoihs「-Os を使うと、3 + 4 - 2 とかが畳み込まれちゃう気がするので」
hsjoihs「まあ一応 -Os でどれくらい減るのかも実験しておくか。そもそも nasm にする予定だけど。CFLAGS=-std=c17 -Wall -s -Os で試すと、」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make 3
cc -std=c17 -Wall -s -Os    3.c   -o 3
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make 42
cc -std=c17 -Wall -s -Os    42.c   -o 42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ wc -c 3
14328 3
```
hsjoihs「はい、ということで nasm 使います」

$DATE「2022年10月3日（一人で作業）」
hsjoihs「とりあえず、原典にこうあるけど、」
$source
```x86asm
  ; tiny.asm
  BITS 32
  GLOBAL _start
  SECTION .text
  _start:
                mov     eax, 1
                mov     ebx, 42  
                int     0x80
```
hsjoihs「64 ビット環境だし、この BITS 32 を削って実行してみるか。Makefile はこんな感じ」
$source
```Makefile
tiny42: tiny42.asm
	nasm -f elf tiny42.asm
	gcc -Wall -s -nostdlib tiny42.o -o tiny42
```
hsjoihs「make tiny42 をすると～？」
$source
```shell
nasm -f elf tiny42.asm
gcc -Wall -s -nostdlib tiny42.o -o tiny42
/usr/bin/ld: i386 architecture of input file `tiny42.o' is incompatible with i386:x86-64 output
collect2: error: ld returned 1 exit status
make: *** [Makefile:12: tiny42] Error 1
```
hsjoihs「はい。正直そんな気はしてた」
hsjoihs「普通に gcc 付属のアセンブラを使ってみるか」
$source
```x86asm
.globl _start
_start:
	movl	$1, %eax
	movl	$42, %ebx  
	int		$0x80
```
hsjoihs「に対して」
$source
```Makefile
tiny42: tiny42.s
	gcc -Wall -s -nostdlib tiny42.s -o tiny42
```
hsjoihs「をかませてやると、まあちゃんと動く。しかし wc -c tiny42 すると 13024 tiny42 なので、結局問題が解決してないんだよな」

hsjoihs「食事から戻った。やっていき」
hsjoihs「https://cs.lmu.edu/~ray/notes/nasmtutorial/ 曰く、」
$source
```
nasm -felf64 hello.asm && ld hello.o && ./a.out
```
hsjoihs「でよいとのこと。なるほど、やってみるか」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make tiny42
nasm -felf64 tiny42.asm
ld tiny42.o -o tiny42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ ./tiny42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ echo $?
42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ wc -c tiny42
4672 tiny42
```
hsjoihs「まあこんなもんか。これ以上削るのはやりすぎな気もする」
hsjoihs「一応マニュアル https://www.nasm.us/doc/ を見る。あ、--reproducible があるのか、都合がいい、つけておこう」
hsjoihs「おや、動かない。このバージョンの nasm にはないのかな」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ nasm --version
NASM version 2.14.02
```
hsjoihs「マニュアルは version 2.15.05 となっている。この --reproducible、なんと version 2.15.05 で加わった最新の機能だそうだ。すばらしい」
hsjoihs「手元の WSL 2 上の Ubuntu でも sudo apt-get update からの sudo apt-get -y install nasm をすれば nasm が最新になってくれたりしないかな」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ sudo apt-get -y install nasm
Reading package lists... Done
Building dependency tree       
Reading state information... Done
nasm is already the newest version (2.14.02-1).
The following package was automatically installed and is no longer required:
  libfwupdplugin1
Use 'sudo apt autoremove' to remove it.
0 upgraded, 0 newly installed, 0 to remove and 44 not upgraded.
```
hsjoihs「残念。じゃあ自分で入れるしかないか」
hsjoihs「とりあえず https://www.linuxfromscratch.org/blfs/view/svn/general/nasm.html に従って入れて……」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ nasm --version
NASM version 2.15.05 compiled on Oct  3 2022
```
hsjoihs「よし。ではいよいよ」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make tiny42
nasm -felf64  --reproducible tiny42.asm
ld tiny42.o -o tiny42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make tiny3
nasm -felf64  --reproducible tiny3.asm
ld tiny3.o -o tiny3
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ ./tiny42; echo $?
42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ ./tiny3; echo $?
3
```
hsjoihs「これは、やったか？」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ cmp -l ./tiny42 ./tiny3
4103  52   3
4185  21  20
4209  14  13
4233  30  27
4257  37  36
4286  64  63
4287  62  56
4288  56 141
4289 141 163
4290 163 155
4291 155   0
4292   0 137
4294 137 142
4295 142 163
4297 163 137
4298 137 163
4299 163 164
4300 164 141
4301 141 162
4302 162 164
4303 164   0
4304   0 137
4305 137 145
4306 145 144
4307 144 141
4308 141 164
4309 164 141
4310 141   0
4311   0 137
4312 137 145
4313 145 156
4314 156 144
4315 144   0
4317   0  56
4318  56 163
4319 163 171
4320 171 155
4321 155 164
4322 164 141
4323 141 142
4324 142   0
4325   0  56
4326  56 163
4327 163 164
4328 164 162
4329 162 164
4330 164 141
4331 141 142
4332 142   0
4333   0  56
4334  56 163
4335 163 150
4336 150 163
4337 163 164
4338 164 162
4339 162 164
4340 164 141
4341 141 142
4342 142   0
4343   0  56
4344  56 164
4345 164 145
4346 145 170
4347 170 164
4348 164   0
4577  44  43
4633 334 333
```
hsjoihs「んー。ああそうか、ld 側にも reproducible にしてくれと頼まないと」
hsjoihs「……軽く調べたが、頼み方がよくわからん。リンカを gold にしたらバージョン名を埋め込んできたし。んー、1 バイトのズレはファイル名『tiny3.asm』『tiny42.asm』の差に起因してるっぽいし、そこを strip かなんかで処理すれば解決するかも？」

$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make tiny42
nasm -felf64  --reproducible tiny42.asm
ld tiny42.o -o tiny42
strip tiny42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make tiny3
nasm -felf64  --reproducible tiny3.asm
ld tiny3.o -o tiny3
strip tiny3
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ ./tiny42; echo $?; ./tiny3; echo $?
42
3
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ cmp -l ./tiny42 ./tiny3
4103  52   3
```
hsjoihs「よし、差分が 1 バイトになった！！！！！」
hsjoihs「ここで 52 って出てるのは cmp コマンドがバイトを 8 進数で出力する仕様になっているからであって、これは 10 進数だと 42 なのでこれで正解です」
hsjoihs「よーし、やっとスタート地点に立つことができた」

$source
```rust
fn main() -> std::io::Result<()> {
    let input = std::env::args().nth(1).expect("入力が与えられていません");
    let input: u8 = input.parse().expect("入力をパースできません");
    let tiny_3 = include_bytes!("../experiment/tiny3");
    let tiny_42 = include_bytes!("../experiment/tiny42");
    assert_eq!(tiny_3.len(), tiny_42.len());

    let file = std::fs::File::create("a.out")?;

    {
        use std::io::Write;
        let mut writer = std::io::BufWriter::new(file);
        for (index, byte) in tiny_3.iter().enumerate() {
            if *byte == tiny_42[index] {
                writer.write_all(&[*byte])?;
            } else if *byte == 3 && tiny_42[index] == 42 {
                writer.write_all(&[input])?;
            } else {
                panic!("`../experiment/tiny3` と `../experiment/tiny42` の間に非自明な差分が見つかったので、なにを出力すべきか分かりません")
            }
        }
    }
    Ok(())
}
```
hsjoihs「これで、step 1 達成！」

$DATE「2022年10月15日」
hsjoihs「そういえば、あの実行形式まで作る c-to-elf-compiler」
hsjoihs「あれステップの偶奇で交互にやりません？」
tkr「あそこから先ってどうやるつもりなんです？」
hsjoihs「いまは写経させてるわけですけど、ステップが進むごとに、その写経してる実行ファイルの内容を少しずつ学ばないといけない」
hsjoihs「逆に、学ばなくていいところは未来に先送りする」
tkr「そこらへんの仕様って……ネットで調べれば落ちてるか」
hsjoihs「それを調べてログに書くのもステップの一部とする、という方針で考えてます」
yuchiki「教育的授業だ」
tkr「自分でバイナリを吐き出したい、と」
hsjoihs「つまり、要は作る側が頑張らないことで、読む側も頑張らなくて済む。少しずつ、ELF の中身を謎解きしていく追体験ができる」
tkr「まあたしかにたしかに」
hsjoihs「というのを考えています。ということで、ステップ 2 『足し算と引き算』やってみません？」
tkr「足し算と引き算をやって、終了コードで返す」
hsjoihs「そうそう」
tkr「結局 main 関数からリターンするだけか」
hsjoihs「実はですね、今の実装は（ログに書いてありますが）_start なので、リンクせずに ebx レジスタに値をセットして、残りを OS に任せてる」 
hsjoihs「これにより、リンクが要らない」
tkr「musl と crt とリンクさせる方針じゃなくても直接吐けばいいのか」
hsjoihs「いずれは C コンパイラになることが期待されているので、いずれは関数 main や関数 foo が宣言できるようになる予定だけど、ステップ 1 を実現するのにはどう考えてもいらないので、したがって省いている」
hsjoihs「そう、要はなにかというと、この方法を取ることによって、まず謎解き感覚になって面白い。次に、『調べすぎちゃいけない』という縛りにしておくことで、我々ともに下手するとコンパイラにかまけて授業とか研究の手を抜きそうな民なので、それをある程度抑止できる」 
tkr「なるべくラクしてバイナリを吐こう、ってことか」
hsjoihs「そうそう。要は compilerbook ってかなりよく書かれた教材なので、逆に言うとあの本をそのまま再走してもあんま面白くない。私に至っては 4 年前にやったし」
hsjoihs「となると、こういう企画にするのが、『我々にとっての面白さ』『我々にとっての勉強になる度』『学校・趣味バランス』の 3 点において優れている、と主張します」
tkr「前は gcc のコンパイル結果を比較してた？」
hsjoihs「実はリポジトリに会話ログを全部取ってあって、リポジトリが https://github.com/sozysozbot/c_to_elf_compiler 、ログが https://sozysozbot.github.io/c_to_elf_compiler/log.html 」
tkr「なんか招待来てたな」
hsjoihs「じゃあ再送しときます」
tkr「受け取った気がする」
tkr「足し算ステップってなにやるんでしたっけ」
hsjoihs「3+5-2とかをコンパイルする」
tkr「スタックは使わないやつだった気がする」
hsjoihs「そう」
hsjoihs「構成としては、最初はマジでわけが分からずバイナリをただ写経してただけだったのが、ステップを進めていくうちに『これを実装するには、自分の理解を増やすことを強いられるな……』が積み重なって、最終的にアセンブラとリンカが勝手に生えてくる」
tkr「ELF の数値の表現ってどうでしたっけ。127 以下だとどうこう、だっけ」
hsjoihs「最初は小さい数だけが動けばよし！」
hsjoihs「というのが、そもそも Rui 本のスピリット」
tkr「たしかに」
tkr「なんて名前でしたっけ、可変長の表現の名前。そうだleb128だ」
hsjoihs「そういう話も、調べて、メモって、『ここ対応できるようにしたいなぁ』となったときに初めて書く、という方針になるわけですね」
hsjoihs「あと言うべきこととしては、とりあえずリポジトリのドキュメンテーションはそれなりには書いたので、読めば分かる」
tkr「開発環境は？」
hsjoihs「Ubuntu on WSL」
tkr「WSL 上じゃないと開発できないようになってそう」
hsjoihs「正解のバイナリを吐くのに使ってるアセンブラ nasm が、比較的最近 --reproducible ってオプションを実装してくれたので、LTS の Ubuntu で apt で入るやつにはまだこのオプションがなく、自分で configure して make する必要がある」
tkr「nasm でしたっけ」
hsjoihs「実をいうと、nasm が動かなくても、nasm が生成してくれたバイナリは『コミットしてある』ので、なくても我々の c-to-elf コンパイラは走る」
hsjoihs「あと、ログのレンダリングは私が雑に実装したレンダラでやってて、CI のセットアップしてないので、」
tkr「勝手にはされない、と」
hsjoihs「node index.js をコミット前にする必要がある」
tkr「nasm の 2.15 だと動きます？」
hsjoihs「自信ないけど 2.16 以降が必要だったかな」

$DATE「2022年10月16日」
tkr「加減算の実装」
tkr「`experiment/tiny3` のサイズが4kを超えていて機械語どころかアセンブリも詳しくない人には厳しい。」
tkr「以下プログラムで127バイトのelfを生成して実行すると終了コード0を出力することを確認。https://github.com/tchajed/minimal-elf」
tkr「`31 ff (xor %edi,%edi`) を `6a 01 (push $0x01) 5f (pop %edi)` にバイナリエディタで書き換えると終了コードが1になることを確認。アドレス `0x78` 以降を書き換えれば加減算の実装は簡単にできそうだ。」
tkr「objdumpコマンドでmovやaddやsubのバイナリ表現を調べて実装終わり」

$DATE「2022年10月17日」
hsjoihs「」
$HTML「えーと次にやるべきは……『<a href="https://www.sigbus.info/compilerbook#%E3%82%B9%E3%83%86%E3%83%83%E3%83%973%E3%83%88%E3%83%BC%E3%82%AF%E3%83%8A%E3%82%A4%E3%82%B6%E3%82%92%E5%B0%8E%E5%85%A5">ステップ3：トークナイザを導入</a>』か。すぐ終わりそう」
hsjoihs「check 2 "5 - 3" を走らせ、テストが無事落ちることを確認。」
hsjoihs「トークナイザをサクッと書いて、挿げ替えて、テストが通ることを確認。」


$DATE「2022年10月27日」
tkr「エラーメッセージを改善するだけ」
tkr「エラー型を定義して関数分割して実装。分岐を少なくするためにtokenにeofを追加」

$DATE「2022年10月29日（一人で作業）」
hsjoihs「tkr からプルリクが来ておる。コードを読んだ。なるほどね。マージ」

$DATE「2022年10月29日（Discord にて）」
hsjoihs「とまあこういうことをやってるんですよ」
hiromi_mi「おもしろかったです、ushitora_anqouと違ってELFファイルを出力できるような状態をたもちつつ拡張するなど、アイデアに一本取られました」
hiromi_mi「LEB128 はこれですね https://ja.osdn.net/projects/drdeamon64/wiki/LEB128%E3%81%AA%E6%95%B0%E3%81%AE%E8%A1%A8%E7%8F%BE 」
hsjoihs「ふむふむ。わりと自然な発想のエンコーディングですね」


$DATE「2022年10月29日（一人で作業）」
hsjoihs「さてやっていこう。compilerbook のステップ 5 には」
$blockquote
```
説明の都合上、一気に*、/、()を実装しているような話の流れになっていますが、実際には一気に実装することは避ける方がよいでしょう。
元々、加減算ができる機能があったわけですから、まずはその機能を壊さずに、抽象構文木とそれを使ったコードジェネレータを導入するようにしてみてください。
そのときには新たな機能を足すわけではないので、新しいテストは必要ありません。その後に、*、/、()を、テスト込みで実装していってください。
```
hsjoihs「と書いてあるので、まずは抽象構文木を導入すべきなんだな」
hsjoihs「まずは clippy の pedantic でも足して、」
hsjoihs「あとそろそろ tokenize を別ファイルに分離するか」
hsjoihs「apperror.rs と tokenize.rs を分離」


$DATE「2022年10月30日（一人で作業）」
hsjoihs「そして抽象構文木を導入」
hsjoihs「さて、コードジェネレーターでこれを使わなきゃいけないんだよな」

$DATE「2022年10月30日（Discord にて）」
hsjoihs「とまあこういうことをやっています」
ikubaku「実行形式の中でも ELF にしてるのってどういう理由です？ELF はそれなりに複雑であり、難易度が上がる気がしていますけど」
hsjoihs「一番ポピュラーであり、私の WSL 環境で動くからです。あと、その複雑さを上手く回避する小技を導入しています（step 1 をどう実装したかを見せる）」
hiromi_mi「最近の Linux では a.out フォーマットのサポートが消えたので、ELF を選択するという判断は妥当そうに思えます。Windows の com も今はダメですし」

$DATE「2022年10月30日（コードジェネレーター）」
hsjoihs「抽象構文木を導入したことにより、許容される式の自由度が真に上がったので、コードジェネレーターを書き換えねばならない。」
hsjoihs「……よな？ここをちゃんと確認しないと『必要最低限のみを調べる』という縛りに抵触してしまう。」
hsjoihs「うむ、一方向にのみ伸びているとは限らない木を処理できるようにするには、スタックマシンの仕組みを導入しないと無理ですな」
hsjoihs「えーと tkr の書いたバイナリ表現を読まないとリファクタリングできない。よって調べる」
hsjoihs「https://defuse.ca/online-x86-assembler.htm に投げたところ、bf ** 00 00 00 は edi レジスタに ** をセットするらしい。じゃあ 83 c7 ** は edi を増やして 83 ef ** は edi を減らすのでしょう」
hsjoihs「とはいえ、我々は「なるべくアセンブリ言語について知らないようにしている」という設定なので、これに mov とか add とか名前を付けるのでは面白くない」
hsjoihs「せっかく Rust が識別子に日本語を許すようになったのだし、『edi増加』『edi減少』とかの関数名にしてしまえ」
hsjoihs「えーと、スタックマシンにする必要がある。そのためにはどのような機械語が必要だろうか。レジスタとメモリの間で色々移動させる必要がありそうだな」
hsjoihs「『即値をスタックにpush』『レジスタをスタックにpush』『スタックからレジスタへとpop』『レジスタの中身を、別のレジスタに足し合わせる』があればいい」
hsjoihs「tkr が既に「6a 01 (push $0x01)」「5f (pop %edi)」というのを調べてくれている。えーと、」
$blockquote
```
☑ 即値をプッシュ 
☒ ediをプッシュ
☑ ediへとポップ
☒ eaxへとポップ
☒ ediにeaxを足し合わせる
☒ ediからeaxを減じる
```
hsjoihs「ということで、あとは残り 4 つを調べればよい」
$source
```rust
fn 即値をプッシュ(n: u8) -> [u8; 2] {
    [0x6a, n]
}

fn ediをプッシュ() -> [u8; 1] {
    [0x57]
}

fn ediへとポップ() -> [u8; 1] {
    [0x5f]
}

fn eaxへとポップ() -> [u8; 1] {
    [0x58]
}

fn ediにeaxを足し合わせる() -> [u8; 2] {
    [0x01, 0xc7]
}

fn ediからeaxを減じる() -> [u8; 2] {
    [0x29, 0xc7]
}
```
hsjoihs「あとはこれらを組み合わせれば動くはず。これでいいかな」
$source
```rust
fn exprを評価してediレジスタへ(writer: &mut impl Write, expr: &Expr) {
    match expr {
        Expr::BinaryExpr {
            op: BinaryOp::Add,
            op_pos: _,
            左辺,
            右辺,
        } => {
            exprを評価してediレジスタへ(writer, 左辺);
            writer.write_all(&ediをプッシュ()).unwrap();
            exprを評価してediレジスタへ(writer, 右辺);
            writer.write_all(&ediをプッシュ()).unwrap();
            writer.write_all(&eaxへとポップ()).unwrap();
            writer.write_all(&ediへとポップ()).unwrap();
            writer.write_all(&ediにeaxを足し合わせる()).unwrap();
        }
        Expr::BinaryExpr {
            op: BinaryOp::Sub,
            op_pos: _,
            左辺,
            右辺,
        } => {
            exprを評価してediレジスタへ(writer, 左辺);
            writer.write_all(&ediをプッシュ()).unwrap();
            exprを評価してediレジスタへ(writer, 右辺);
            writer.write_all(&ediをプッシュ()).unwrap();
            writer.write_all(&eaxへとポップ()).unwrap();
            writer.write_all(&ediへとポップ()).unwrap();
            writer.write_all(&ediからeaxを減じる()).unwrap();
        }
        Expr::Primary { val, pos: _ } => {
            writer.write_all(&ediに代入(*val)).unwrap();
        }
    }
}

fn parse_and_codegen(
    mut writer: &mut impl Write,
    tokens: &[Token],
    input: &str,
) -> Result<(), AppError> {
    let expr = parse(tokens, input)?;

    let tiny = include_bytes!("../experiment/tiny");
    writer.write_all(&tiny[0..0x78]).unwrap();
    writer.write_all(&[0xb8, 0x3c, 0x00, 0x00, 0x00]).unwrap();

    exprを評価してediレジスタへ(&mut writer, &expr);

    writer.write_all(&[0x0f, 0x05]).unwrap();
    Ok(())
}
```
hsjoihs「走らせてみよう」
$source
```
[FAIL] 1+2 => 3 expected, but got 139
```
hsjoihs「なるほど落ちる。あー、多分 eax レジスタをなんか別ので使ってるんだろうな。0xb8, 0x3c, 0x00, 0x00, 0x00 辺りかな」
hsjoihs「じゃあそれを『exprを評価してediレジスタへ』より後ろに回すと……動いた。」

$DATE「2022年10月30日（乗算）」
hsjoihs「次は乗算を組んでいこう。まず構文木に BinaryOp::Mul を加える。対応するバイナリ表現も調べる」
$source
```rust
fn ediをeax倍にする() -> [u8; 3] {
    [0x0f, 0xaf, 0xf8]
}
```
hsjoihs「次に、再帰下降パーサにする。前に自分で書いた Rust での再帰下降を眺めよう」
$URL「https://docs.google.com/presentation/d/180pyDEMnBUPVIsQuNYgbdD0oWB-vZdzoJR4md_yEYRQ/edit#slide=id.g1339727b6e0_0_237」
hsjoihs「再帰下降パーサというのは、『読めるところまで読み、それ以外は読み残す』という挙動をする部品を組み合わせることで上手くいく」
hsjoihs「ということで、とりあえずイテレータを取るような関数へと変更。peekable もほしいかな」
hsjoihs「そして parse_multiplicative 関数を実装し、parse の中ではそれを呼ぶようにする」
hsjoihs「さて 3*4-5 が動くかな？おっと Mac ではそもそもどのテストケースも通らない。WSL で試すか」
hsjoihs「ああ普通に 1+2 が落ちてる。それはそうで、せっかく peekable にしたのに peek していない」
hsjoihs「peekするようにすると……おっと『演算子かeofが期待されていますが、数か * が来ました』と言われる。ああここも peek にしないとね。あと第一式も parse_multiplicative にしないと」
hsjoihs「修正したら通った。"9 *8  - 7*  6 + 5*  4*1" とかも通りますね」
hsjoihs「次はカッコを実装しよう。そのためには、」
$HTML「<ul><li>数値リテラルを読むところを parse_primary 関数に切り出す</li><li>『全部読めていない場合に落とす』の部分を parse 関数から切り出す</li><li>カッコで括った式を primary と見なす</li></ul>」
hsjoihs「という変更を加えることになる。とりあえず最初の二つをやり、テストが通ることを確認」
hsjoihs「次はトークナイザへのカッコの追加だ。正直 paren, sqbracket, brace とかより『開き丸括弧』の方が読みやすくない？バンバン日本語識別子を使っていこう」
hsjoihs「そうしたら parse_primary の中で parse_additive を呼んでやって、テストを書く」
hsjoihs「えーと "5*(6-3)*7" が「演算子の次に来ているものが数値ではありません」で落ちる」
hsjoihs「ああ、parse_multicative の右辺の方を parse_primary にしていなかったな。直した。テストが通る」
hsjoihs「残るは除算の実装だけ。これ面倒なんだよな。compilerbook にはこう書いてある」
$blockquote
```
特にパースやコード生成において重要なポイントではないのですが、トリッキーな仕様のidiv命令が上のコードでは使われているので、それについて説明しておきましょう。

idivは符号あり除算を行う命令です。x86-64のidivが素直な仕様になっていれば、上のコードでは本来idiv rax, rdiのように書きたかったところですが、そのような2つのレジスタをとる除算命令はx86-64には存在しません。その代わりに、idivは暗黙のうちにRDXとRAXを取って、それを合わせたものを128ビット整数とみなして、それを引数のレジスタの64ビットの値で割り、商をRAXに、余りをRDXにセットする、という仕様になっています。cqo命令を使うと、RAXに入っている64ビットの値を128ビットに伸ばしてRDXとRAXにセットすることができるので、上記のコードではidivを呼ぶ前にcqoを呼んでいます。
```
hsjoihs「ということで、足すべきは以下の通り」
$source
```rust
fn eaxの符号ビットをedxへ拡張() -> [u8; 1] {
    [0x99]
}

fn edx_eaxをediで割る_商はeaxに_余りはedxに() -> [u8; 2] {
    [0xf7, 0xff]
}

fn eaxをプッシュ() -> [u8; 1] {
    [0x50]
}
```
hsjoihs「テストケースも足したし、これで『ステップ5：四則演算のできる言語の作成』が完了」

$DATE「2022年10月31日（Discordにて）」
hsjoihs「コードレビューお願いします」
tkr「diff がでかくて見るのが大変で放置してた」
hsjoihs「まあ再帰下降にする過程で全部書き直す羽目になりますからねぇ」
tkr「わかるなぁ」
tkr「そういえば、ログのページを生成するのも CI にしたい。えーと今は master ブランチの上の GitHub Pages を直に公開してるのか」
hsjoihs「じゃあ step 8 の代わりに CI の整備とかお願いしていいですかね。本来の step 8 はコンパイラのソースコードをファイル分割して Makefile をセットアップするプロセスなんですけど、Rust で書いている我々にとっては既にそれは解決されているので」

$DATE「2022年10月31日（GitHubにて）」
tkr「これposどこにするか迷う 🤔」
tkr「エラーメッセージ的にはここが正しそうだけど「unexpected token」的なエラーメッセージとどっちが分かりやすいんだろう」
$source
```rust
                _ => Err(AppError {
                    message: "この開き丸括弧に対応する閉じ丸括弧がありません".to_string(),
                    input: input.to_string(),
                    pos: *pos,
```
tkr「というのが気になったけど、大体よさそう」
hsjoihs「まあ理想的には Rust みたいに「範囲」でエラーを持つ方がきれいですよね。まあ Rui 本はあんまりエラーに凝らない設計なので、あんま深く考えなくていいでしょう」
tkr「あとは Peekable 使うかスライス使うかとか迷うなぁ」
tkr「パーサのファイル分割とかはstep8？でやるかー」

$DATE「2022年11月7日」
tkr「そろそろやらなければ」
tkr「単項演算子の実装はパーサー少し変更するだけっぽいので一瞬で終わった」
tkr「色々テスト書いて終わり」
tkr「今後 `-"x"` みたいな型エラー発生するコードを書いたときにエラーメッセージが微妙に分かりにくくなるのが気になるが」

$DATE「2022年11月9日」
hsjoihs「やるぞ」
hsjoihs「比較演算子を実装。ここら辺は本当にやるだけだな」
hsjoihs「関数が長くなりすぎて clippy が文句を言ってきているな。でもこれ過剰に分割しても読みやすくならないだろうし、#[allow(clippy::too_many_lines)] でお茶を濁そう」

$DATE「2022年11月10日」
tkr「CIの整備をします」
tkr「github pagesの設定を修正してactionsからのアップロードみたいなのに変更する必要があるけど権限ないのでお願いします」
tkr「やったことはコミットメッセージに」

$DATE「2022年11月11日（CIの修正）」
hsjoihs「tkr からプルリクが来ておるな」
hsjoihs「CIの整備と、ファイル分割がされている。ありがたい。まずマージして、」
hsjoihs「設定を変更して、えっと」
hsjoihs「あーあれか、マージしてから設定を変更したせいで、この版まではデフォルトのgithub-pages アクションに基づいて生成されているのか」
hsjoihs「じゃあ、もう一回コミットしたら tkr の書いた GitHub Action が走ってくれる？」
hsjoihs「んー、Workflow details will appear here once your site has been deployed. と言われる」
hsjoihs「Your site was last deployed to the github-pages environment by the pages build and deployment workflow. とのことだから、設定できてないな」
hsjoihs「https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site 曰く、」
$blockquote
```
If you already have a workflow to publish your site, you can skip this step. 

GitHub Pages does not associate a specific workflow to the GitHub Pages settings. However, the GitHub Pages settings will link to the workflow run that most recently deployed your site.
```
hsjoihs「とのこと。つまり、Source: GitHub Actions とだけ出てそれ以上設定する画面がないという現状で問題ないっぽい」
hsjoihs「次に、https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#creating-a-custom-github-actions-workflow-to-publish-your-site を見ると、」

$blockquote
```
The general flow of a workflow is to:

1. Trigger whenever there is a push to the default branch of the repository or whenever the workflow is run manually from the Actions tab.

2. Use the actions/checkout action to check out the repository contents.
    
3. If required by your site, build any static site files.

4. Use the actions/upload-pages-artifact action to upload the static files as an artifact.
    
5. If the workflow was triggered by a push to the default branch, use the actions/deploy-pages action to deploy the artifact. This step is skipped if the workflow was triggered by a pull request.
```
hsjoihs「と書いてある。tkr の書いてくれた workflows/docs.yaml には actions/checkout と actions/upload-pages-artifact が言及されている」

hsjoihs「ふむ、The starter workflows use a deployment environment called github-pages. If your repository does not already include an environment called github-pages, the environment will be created automatically. と書いてある。名前を変えてみるか」
hsjoihs「うまくいかない。 actions/deploy-pages action を足してみるか」
hsjoihs「CI が落ちた。https://github.com/sozysozbot/c_to_elf_compiler/actions/runs/3438529083/jobs/5734705044 」
$blockquote
```
Error: Error message: Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable
    at Function.<anonymous> (/home/runner/work/_actions/actions/deploy-pages/v1/webpack:/deploy-pages/node_modules/@actions/core/lib/oidc-utils.js:71:1)
    at Generator.next (<anonymous>)
    at /home/runner/work/_actions/actions/deploy-pages/v1/webpack:/deploy-pages/node_modules/@actions/core/lib/oidc-utils.js:8:1
    at new Promise (<anonymous>)
    at __webpack_modules__.8041.__awaiter (/home/runner/work/_actions/actions/deploy-pages/v1/webpack:/deploy-pages/node_modules/@actions/core/lib/oidc-utils.js:4:1)
    at Function.getIDToken (/home/runner/work/_actions/actions/deploy-pages/v1/webpack:/deploy-pages/node_modules/@actions/core/lib/oidc-utils.js:57:1)
    at Object.<anonymous> (/home/runner/work/_actions/actions/deploy-pages/v1/webpack:/deploy-pages/node_modules/@actions/core/lib/core.js:315:1)
    at Generator.next (<anonymous>)
    at /home/runner/work/_actions/actions/deploy-pages/v1/webpack:/deploy-pages/node_modules/@actions/core/lib/core.js:27:1
    at new Promise (<anonymous>)
Error: Ensure GITHUB_TOKEN has permission "idToken: write".
```
hsjoihs「うーむ。とりあえず上手くいっていないので、せっかくバージョン管理されていることだし、上手くいっていたところまで強引に世界を差し戻すか？」
hsjoihs「いや、https://github.com/jurliyuuri/cerke_online_alpha/blob/master/.github/workflows/deploy.yml のを転用して、gh-pages ブランチからページを生やすようにしよう」
hsjoihs「えーと、https://github.com/sozysozbot/c_to_elf_compiler/actions/runs/3438695080/workflow 曰く、」
$blockquote
```
The workflow is not valid. .github/workflows/docs.yaml (Line: 35, Col: 14): Unexpected value '' .github/workflows/docs.yaml (Line: 36, Col: 9): Unexpected value 'github_token'
```
hsjoihs「それはそう。え、でも cerke_online_alpha には secret が設定されていないと書いてあるけど」
hsjoihs「https://github.com/peaceiris/actions-gh-pages 曰く、」
$blockquote
```
For newbies of GitHub Actions: Note that the GITHUB_TOKEN is NOT a personal access token. A GitHub Actions runner automatically creates a GITHUB_TOKEN secret to authenticate in your workflow. So, you can start to deploy immediately without any configuration.
```
hsjoihs「あ、そうなの。じゃあなんで落ちてるんだろうか」

hsjoihs「https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-first-deployment-with-github_token を読む。なるほど、初回は失敗することが想定されているのか。へー」
hsjoihs「とりあえず git checkout --orphan gh-pages をして push することで gh-pages ブランチを作るか」
hsjoihs「えーとインデントが壊れている。直そう」
hsjoihs「ジョブは走っているが、ページが出力されない。.nojekyll ってファイルだけが生えておる」
hsjoihs「ああ、publish_dir がミスってるのか」
hsjoihs「直したら直った！URL も今までと変わらず提供できている。勝利ですね。リポジトリの README も直しておくか」

$DATE「2022年11月11日（一文字変数）」
hsjoihs「さて、次は複文と一文字変数」
hsjoihs「そういえば、compilerbook では『一番最後の式の結果をプログラム全体の計算結果とすることにします』として、構文定義がこうなってるけど、」
$blockquote
```
program    = stmt*
stmt       = expr ";"
expr       = assign
assign     = equality ("=" assign)?
equality   = relational ("==" relational | "!=" relational)*
relational = add ("<" add | "<=" add | ">" add | ">=" add)*
add        = mul ("+" mul | "-" mul)*
mul        = unary ("*" unary | "/" unary)*
unary      = ("+" | "-")? primary
primary    = num | ident | "(" expr ")"
```
hsjoihs「このプロジェクトは Rust で書いてるんだし、Rust と同様に『文の列の最後に式を書くと、それが戻り値になる』で組もうかな」
hsjoihs「こうすることの利点としては、」
$HTML「<ul><li>今までのテストケースに手を入れなくて済む</li><li>スタック操作をミスってバグが出たときに、より早期に気づきやすい（Cコンパイラ班の受講生で、ここの周りで混乱してバグらせた人を見た）</li><li>実はセミコロンを中置演算子として見ることができ、既存の再帰下降のコピペで実装が終わる</li></ul>」
hsjoihs「などが挙げられそう」
hsjoihs「ところで、関係ないけど、このログを生成する自作ツール PseudoRoku に箇条書き機能欲しくなってきたな。$HTML コマンドに <ul> を食わせて1行ずつで書かなきゃいけないのが面倒になってきた」
hsjoihs「さて、とりあえずトークナイザに一文字変数を足さねば。あと Assign 演算子も足そう。右結合だから、ループにせずとも再帰で十分」
hsjoihs「いや、まずは最小限の変更で動かしたいから、最初はセミコロンだけだな。AndThenという二項演算子として処理して、」
$source
```rust
        Expr::BinaryExpr {
            op: BinaryOp::AndThen,
            op_pos: _,
            左辺,
            右辺,
        } => {
            exprを評価してediレジスタへ(writer, 左辺); // 左辺は push せずに捨てる
            exprを評価してediレジスタへ(writer, 右辺);
        }
```
hsjoihs「これだけで動くはず。便利」
hsjoihs「次に、一文字変数と代入が必要。'a' から 'z' および '=' をトークナイズし、パーサーを増やす。parse_primary で識別子を読むコードも必要」
hsjoihs「あとはコード生成を書くだけ。今回の実装では return しないので、エピローグは不要で、プロローグで変数 26 個分の領域を確保すれば十分」
hsjoihs「おや、パースが通らない。なるほど、再帰下降のコピペミスか。直した。しかし Mac だとテストケースごとに docker run するから遅いな。しょうがないけど」
hsjoihs「直したらパースが通るようになったが、`a = 3; b = 4; a + b` で `7 expected, but got 139` が出ている。なんかミスっておるな」
hsjoihs「`a = 7; a` でも同じ。ところで、この手のミスをすると毎回 139 が来る気がするけど、これなんなんだろう」
hsjoihs「あーわかった。コメントアウトしてた『ediから即値を引く』関数をそのまま使ってたけど、これは『edi から即値を引く』から、rdi の上位 32 ビットがクリアされちゃってるんだな」
hsjoihs「ということで、」
$source
```rust
fn rdiから即値を引く(n: u8) -> [u8; 4] {
    [0x48, 0x83, 0xef, n]
}
```
hsjoihs「にしたら……動いた！」
hsjoihs「今までは意図的に 32 ビットレジスタと 64 ビットレジスタを混同するような書き方をしてきたけど、そろそろちゃんと分ける必要が出てきますわね」
hsjoihs「あ、CI で cargo fmt が要求されてる。掛けておくか」
hsjoihs「そういえば、せっかく `a = b = 7` みたいなやつに対応してあるんだから、テストケースに足しておこう」

$DATE「2022年11月21日」
hsjoihs「そういやこの 139 ってなんなんですかね。SIGSEGV のシグナル自体は 139 ではなかった気がするんですけど」
hsjoihs「あー、シグナルが 11 で exit code が 139 か」
hiromi_mi「『なんらかの異常値である』必要はそりゃあると思いますけど、具体的になんで 139 なんですかね」
hsjoihs「あ、128 + 11 ってことなのかな」

$DATE「2022年11月24日」
tkr「複数文字のローカル変数」
tkr「Rustなので `HashMap` 使ってまあ適当に」
tkr「変数にアンダースコアとか数値も使えるように」
tkr「ローカル変数情報のバケツリレーつらいからそろそろcodegenをstructにしてもいいかもな」
tkr「compilerbookだとこのステップ終わっても26個しか変数使えなくない？この制限解除しようとすると `rspから即値を引く` の段階では変数の数決まらないからきついな。とりあえず `Write + Seek` にするか」

hsjoihs「tkr からのプルリクを読みます」
hsjoihs「読んだ。マージした。」
hsjoihs「さて、今回は return 文なわけで、これによって既存のテストケースを変更する必要がある」
$source
```diff
-   a = b = 7; a 
+   a = b = 7; return a;
```
hsjoihs「みたいな変更を全部に入れる必要があり、とりあえずそれのコンパイルを通す必要がある」
hsjoihs「まあ、とりあえずは return キーワードをトークナイザに足すところからですな」
hsjoihs「一瞬で足せた。payload をすり替えるだけだな。で、次にパーサーに手を加える必要がある。今まではセミコロンを 2 項演算子として扱っていたので、それを修正する必要がある」
hsjoihs「まず、Expr と Program を分離していく。定義を複製してすり替えることで、とりあえず動くものを作る」
hsjoihs「次に、Statement 型を立てていく。parse_statement を立て、それの繰り返しにより parse_program を定義する。Program は Vec<Statement> とする」
hsjoihs「えーっと、今回は return してるわけじゃないんだよな。とはいえ syscall したら帰ってこないから、普通にエピローグを出力すればいいのか」
hsjoihs「これはテストケースにもう return を足して、return 文も実装してしまおう」
hsjoihs「えーと通らない。『数値リテラルでも開き丸括弧でもないものが来ました』というメッセージ。多分再帰下降のどこかで「エラーを出さずにスルー」を忘れている」
hsjoihs「いや違うな。eof トークンがあるから while tokens.peek().is_some() ではダメなんだ。」
hsjoihs「直したら動いた」
hsjoihs「よしプルリクエストを作成。あ、テストケースを増やした方がいいな」